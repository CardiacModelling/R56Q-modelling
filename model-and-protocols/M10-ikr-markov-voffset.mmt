[[model]]
name: M10-IKr
author: Dominic Whittaker
# Initial values
ikr.c1 = 0
ikr.c2 = 1
ikr.i = 0
ikr.ic1 = 0
ikr.ic2 = 0
ikr.o = 0

#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
V = engine.pace
    desc: membane potential
    in [mV]

[nernst]
EK = -88 [mV]

[misc]
n_params = 12
LJP = 4.5

[voltage_clamp]
use membrane.V
V_off = 0

[ikr]
use membrane.V
use voltage_clamp.V_off
V_r = V + V_off
IKr = p13 * o * (V_r - nernst.EK)

dot(c1) = a1 * c2 + ah * ic1 + b2 * o - (b1 + bh + a2) * c1
dot(c2) = b1 * c1 + ah * ic2 - (a1 + bh) * c2
dot(i) = a2 * ic1 + bh * o - (b2 + ah) * i
dot(ic1) = a1 * ic2 + bh * c1 + b2 * i - (b1 + ah + a2) * ic1
dot(ic2) = b1 * ic1 + bh * c2 - (ah + a1) * ic2
dot(o) = a2 * c1 + ah * i - (b2 + bh) * o

a1 = p1 * exp(p2 * V_r)
b1 = p3 * exp(-p4 * V_r)
bh = p5 * exp(p6 * V_r)
ah = p7 * exp(-p8 * V_r)
a2 = p9 * exp(p10 * V_r)
b2 = p11 * exp(-p12 * V_r)

p1 = 2.26e-4 [1/ms]
p2 = 0.06990 [1/mV]
p3 = 3.45e-5 [1/ms]
p4 = 0.05462 [1/mV]
p5 = 0.08730 [1/ms]
p6 = 8.91e-3 [1/mV]
p7 = 5.15e-3 [1/ms]
p8 = 0.03158 [1/mV]
p9 = 0.08730 [1/ms]
p10 = 8.91e-3 [1/mV]
p11 = 5.15e-3 [1/ms]
p12 = 0.03158 [1/mV]
p13 = 0 [mS/uF]

[[script]]
import myokit
import myokit.pacing as pacing
import numpy as np
import matplotlib
import matplotlib.pyplot as pl

#
# Simple IKr test script
#

# Get model
m = get_model()

# Create pacing protocol
v = np.arange(-100, 50 + 10, 10)
p = pacing.steptrain(
        vsteps=v,
        vhold=-80,
        tpre=2000,
        tstep=5000,
        tpost=3000)

d = [
    'engine.time',
    'membrane.V',
    'ikr.IKr',
    ]

# Run simulation
s = myokit.Simulation(m, p)
s.set_max_step_size(0.1)
d = s.run(p.characteristic_time(), log=d)

# Create colormap for plotting
cmap = matplotlib.cm.get_cmap('viridis')
norm = matplotlib.colors.Normalize(0, len(v))

# Plot data as overlapping steps
d2 = d.npview()
d2 = d2.regularize(0.5)
d2 = d2.fold(10000)
pl.figure()
for k in xrange(len(v)):
    pl.subplot(2,1,1)
    pl.plot(d2.time(), d2['membrane.V', k], color=cmap(norm(k)))
    pl.subplot(2,1,2)
    pl.plot(d2.time(), d2['ikr.IKr', k], color=cmap(norm(k)))
pl.show()

